generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  email      String   @unique
  bio        String?
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tweets     Tweet[]
  likes      Like[]
  replies    Reply[]
}

model Tweet {
  id          Int      @id @default(autoincrement())
  description String
  photo       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  likes       Like[]
  replies     Reply[]
}

model Like {
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet      Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId     Int
  tweetId    Int

  @@id(name: "id", [userId, tweetId])
}

model Reply {
  id          Int      @id @default(autoincrement())
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet       Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId      Int
  tweetId     Int
}
